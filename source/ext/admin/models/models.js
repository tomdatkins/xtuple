/*jshint indent:2, curly:true eqeqeq:true, immed:true, latedef:true,
newcap:true, noarg:true, regexp:true, undef:true, strict:true, trailing:true
white:true*/
/*global XT:true, XM:true, Backbone:true, _:true */

(function () {
  "use strict";

  /**
    @class

    @extends XM.Model
  */
  XM.DatabaseServer = XM.Model.extend({
    /** @scope XM.DatabaseServer.prototype */

    recordType: 'XM.DatabaseServer',

    idAttribute: 'name',

    databaseType: 'global',

    autoFetchId: false,

    /*
     XXX do we want this to be editable?
    readOnlyAttributes: [
      "dateAdded"
    ],
    */

    /**
     * The username attribute must be editable for a new entry. This overrides
     * the fact that model sets username as readOnly by virtue of its being
     * the idAttribute. Most other idAttributes are autogenerated.
     */
     // TODO duplicate code from user_account. Consider refactoring
    initialize: function (attributes, options) {
      XM.Model.prototype.initialize.apply(this, arguments);
      this.on('statusChange', this.statusChanged);
      this.statusChanged();
    },
    statusChanged: function () {
      if (this.getStatus() === XM.Model.READY_NEW) {
        this.setReadOnly('name', false);
      }
    }

  });

  /**
    @class

    @extends XM.Model
  */
  XM.Datasource = XM.Model.extend({
    /** @scope XM.Datasource.prototype */

    recordType: 'XM.Datasource',

    idAttribute: 'name',

    databaseType: 'global',

    autoFetchId: false

  });

  /**
    @class

    @extends XM.Model
  */
  XM.Extension = XM.Model.extend({
    /** @scope XM.Extension.prototype */

    recordType: 'XM.Extension',

    databaseType: 'global'

  });

  /**
    @class

    @extends XM.Model
  */
  XM.Organization = XM.Model.extend({
    /** @scope XM.Organization.prototype */

    recordType: 'XM.Organization',

    idAttribute: 'name',

    databaseType: 'global',

    autoFetchId: false,

    /**
     * The username attribute must be editable for a new entry. This overrides
     * the fact that model sets username as readOnly by virtue of its being
     * the idAttribute. Most other idAttributes are autogenerated.
     */
     // TODO duplicate code from user_account. Consider refactoring
    initialize: function (attributes, options) {
      XM.Model.prototype.initialize.apply(this, arguments);
      this.on('statusChange', this.statusChanged);
      this.statusChanged();
    },
    statusChanged: function () {
      if (this.getStatus() === XM.Model.READY_NEW) {
        this.setReadOnly('name', false);
      }
    }
  });

  /**
    @class

    @extends XM.Model
  */
  XM.OrganizationExtension = XM.Model.extend({
    /** @scope XM.OrganizationExtension.prototype */

    recordType: 'XM.OrganizationExtension',

    databaseType: 'global'

  });

  /**
    @class

    @extends XM.Model
  */
  XM.Session = XM.Model.extend({
    /** @scope XM.Session.prototype */

    recordType: 'XM.Session',

    idAttribute: 'sid',

    databaseType: 'global',

    autoFetchId: false

  });

  /**
    @class

    @extends XM.Model
  */
  XM.SessionOrganization = XM.Model.extend({
    /** @scope XM.SessionOrganization.prototype */

    recordType: 'XM.SessionOrganization',

    databaseType: 'global'

  });

  /**
    @class

    @extends XM.Model
  */
  XM.User = XM.Document.extend({
    /** @scope XM.User.prototype */

    recordType: 'XM.User',

    autoFetchId: false,

    documentKey: 'id',

    enforceUpperKey: false,

    databaseType: 'global',

    /**
     * The username attribute must be editable for a new entry.
     */
    initialize: function (attributes, options) {
      XM.Document.prototype.initialize.apply(this, arguments);
      this.setReadOnly('id', this.getStatus() !== XM.Model.READY_NEW);
    },

    findExisting: function (key, value, options) {
      var recordType = this.recordType || this.prototype.recordType,
        params = [ recordType, key, value, value + "1" ];
      this.dispatch('XM.Model', 'findExisting', params, options);
      return this;
    }

  });

  /**
    @class

    @extends XM.Model
  */
  XM.UserOrganization = XM.Model.extend({
    /** @scope XM.UserOrganization.prototype */

    recordType: 'XM.UserOrganization',

    databaseType: 'global',

    requiredAttributes: [
      "name",
      "username"
    ]

  });

  /**
    @class

    @extends XM.Model
  */
  XM.GlobalPrivilege = XM.Model.extend(/** @lends XM.GlobalPrivilege.prototype */{

    recordType: 'XM.GlobalPrivilege',

    databaseType: 'global'

  });

  /**
    @class

    @extends XM.Model
  */
  XM.UserGlobalPrivilegeAssignment = XM.Model.extend(/** @lends XM.UserGlobalPrivilegeAssignment.prototype */{

    recordType: 'XM.UserGlobalPrivilegeAssignment',

    databaseType: 'global'

  });

  XM.Extension = XM.Model.extend(/** @lends XM.Extension.prototype */{

    recordType: 'XM.Extension',

    databaseType: 'global'

  });

  XM.OrganizationExtension = XM.Model.extend(/** @lends XM.OrganizationExtension.prototype */{

    recordType: 'XM.OrganizationExtension',

    databaseType: 'global'

  });

  // ..........................................................
  // COLLECTIONS
  //

  /**
    @class

    @extends XM.Collection
  */
  XM.DatabaseServerCollection = XM.Collection.extend({
    /** @scope XM.DatabaseServerCollection.prototype */

    model: XM.DatabaseServer

  });

  /**
    @class

    @extends XM.Collection
  */
  XM.DatasourceCollection = XM.Collection.extend({
    /** @scope XM.DatasourceCollection.prototype */

    model: XM.DatabaseServer
  });

  /**
    @class

    @extends XM.Collection
  */
  XM.OrganizationCollection = XM.Collection.extend({
    /** @scope XM.OrganizationCollection.prototype */

    model: XM.Organization

  });

  /**
    @class

    @extends XM.Collection
  */
  XM.SessionCollection = XM.Collection.extend({
    /** @scope XM.SessionCollection.prototype */

    model: XM.Session

  });

  /**
    @class

    @extends XM.Collection
  */
  XM.UserCollection = XM.Collection.extend({
    /** @scope XM.UserCollection.prototype */

    model: XM.User

  });

  /**
    @class

    @extends XM.Collection
  */
  XM.UserOrganizationCollection = XM.Collection.extend({
    /** @scope XM.UserOrganizationCollection.prototype */

    model: XM.UserOrganization

  });

  /**
    @class

    @extends XM.Collection
  */
  XM.ExtensionCollection = XM.Collection.extend(/** @lends XM.SessionCollection.prototype */{

    model: XM.Extension

  });

  /**
    @class

    @extends XM.Collection
  */
  XM.GlobalPrivilegeCollection = XM.Collection.extend(/** @lends XM.GlobalPrivilegeCollection.prototype */{

    model: XM.GlobalPrivilege

  });
}());
